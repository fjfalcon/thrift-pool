/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qiwi.thrift.tracing.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-21")
public class RequestHeader implements org.apache.thrift.TBase<RequestHeader, RequestHeader._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHeader");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("trace_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("span_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_span_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SAMPLED_FIELD_DESC = new org.apache.thrift.protocol.TField("sampled", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("client_id", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestHeaderTupleSchemeFactory());
  }

  public long trace_id; // required
  public long span_id; // required
  public long parent_span_id; // optional
  public boolean sampled; // optional
  public ClientId client_id; // optional
  public long flags; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)1, "trace_id"),
    SPAN_ID((short)2, "span_id"),
    PARENT_SPAN_ID((short)3, "parent_span_id"),
    SAMPLED((short)5, "sampled"),
    CLIENT_ID((short)6, "client_id"),
    FLAGS((short)7, "flags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // SPAN_ID
          return SPAN_ID;
        case 3: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        case 5: // SAMPLED
          return SAMPLED;
        case 6: // CLIENT_ID
          return CLIENT_ID;
        case 7: // FLAGS
          return FLAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRACE_ID_ISSET_ID = 0;
  private static final int __SPAN_ID_ISSET_ID = 1;
  private static final int __PARENT_SPAN_ID_ISSET_ID = 2;
  private static final int __SAMPLED_ISSET_ID = 3;
  private static final int __FLAGS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARENT_SPAN_ID,_Fields.SAMPLED,_Fields.CLIENT_ID,_Fields.FLAGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("trace_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("span_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parent_span_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SAMPLED, new org.apache.thrift.meta_data.FieldMetaData("sampled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("client_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientId.class)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHeader.class, metaDataMap);
  }

  public RequestHeader() {
  }

  public RequestHeader(
    long trace_id,
    long span_id)
  {
    this();
    this.trace_id = trace_id;
    setTraceIdIsSet(true);
    this.span_id = span_id;
    setSpanIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestHeader(RequestHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    this.trace_id = other.trace_id;
    this.span_id = other.span_id;
    this.parent_span_id = other.parent_span_id;
    this.sampled = other.sampled;
    if (other.isSetClientId()) {
      this.client_id = new ClientId(other.client_id);
    }
    this.flags = other.flags;
  }

  public RequestHeader deepCopy() {
    return new RequestHeader(this);
  }

  @Override
  public void clear() {
    setTraceIdIsSet(false);
    this.trace_id = 0;
    setSpanIdIsSet(false);
    this.span_id = 0;
    setParentSpanIdIsSet(false);
    this.parent_span_id = 0;
    setSampledIsSet(false);
    this.sampled = false;
    this.client_id = null;
    setFlagsIsSet(false);
    this.flags = 0;
  }

  public long getTraceId() {
    return this.trace_id;
  }

  public RequestHeader setTraceId(long trace_id) {
    this.trace_id = trace_id;
    setTraceIdIsSet(true);
    return this;
  }

  public void unsetTraceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACE_ID_ISSET_ID);
  }

  /** Returns true if field trace_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACE_ID_ISSET_ID);
  }

  public void setTraceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACE_ID_ISSET_ID, value);
  }

  public long getSpanId() {
    return this.span_id;
  }

  public RequestHeader setSpanId(long span_id) {
    this.span_id = span_id;
    setSpanIdIsSet(true);
    return this;
  }

  public void unsetSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPAN_ID_ISSET_ID);
  }

  /** Returns true if field span_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPAN_ID_ISSET_ID);
  }

  public void setSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPAN_ID_ISSET_ID, value);
  }

  public long getParentSpanId() {
    return this.parent_span_id;
  }

  public RequestHeader setParentSpanId(long parent_span_id) {
    this.parent_span_id = parent_span_id;
    setParentSpanIdIsSet(true);
    return this;
  }

  public void unsetParentSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENT_SPAN_ID_ISSET_ID);
  }

  /** Returns true if field parent_span_id is set (has been assigned a value) and false otherwise */
  public boolean isSetParentSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENT_SPAN_ID_ISSET_ID);
  }

  public void setParentSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENT_SPAN_ID_ISSET_ID, value);
  }

  public boolean isSampled() {
    return this.sampled;
  }

  public RequestHeader setSampled(boolean sampled) {
    this.sampled = sampled;
    setSampledIsSet(true);
    return this;
  }

  public void unsetSampled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAMPLED_ISSET_ID);
  }

  /** Returns true if field sampled is set (has been assigned a value) and false otherwise */
  public boolean isSetSampled() {
    return EncodingUtils.testBit(__isset_bitfield, __SAMPLED_ISSET_ID);
  }

  public void setSampledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAMPLED_ISSET_ID, value);
  }

  public ClientId getClientId() {
    return this.client_id;
  }

  public RequestHeader setClientId(ClientId client_id) {
    this.client_id = client_id;
    return this;
  }

  public void unsetClientId() {
    this.client_id = null;
  }

  /** Returns true if field client_id is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.client_id != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.client_id = null;
    }
  }

  public long getFlags() {
    return this.flags;
  }

  public RequestHeader setFlags(long flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((Long)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((Long)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParentSpanId();
      } else {
        setParentSpanId((Long)value);
      }
      break;

    case SAMPLED:
      if (value == null) {
        unsetSampled();
      } else {
        setSampled((Boolean)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((ClientId)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTraceId();

    case SPAN_ID:
      return getSpanId();

    case PARENT_SPAN_ID:
      return getParentSpanId();

    case SAMPLED:
      return isSampled();

    case CLIENT_ID:
      return getClientId();

    case FLAGS:
      return getFlags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTraceId();
    case SPAN_ID:
      return isSetSpanId();
    case PARENT_SPAN_ID:
      return isSetParentSpanId();
    case SAMPLED:
      return isSetSampled();
    case CLIENT_ID:
      return isSetClientId();
    case FLAGS:
      return isSetFlags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestHeader)
      return this.equals((RequestHeader)that);
    return false;
  }

  public boolean equals(RequestHeader that) {
    if (that == null)
      return false;

    boolean this_present_trace_id = true;
    boolean that_present_trace_id = true;
    if (this_present_trace_id || that_present_trace_id) {
      if (!(this_present_trace_id && that_present_trace_id))
        return false;
      if (this.trace_id != that.trace_id)
        return false;
    }

    boolean this_present_span_id = true;
    boolean that_present_span_id = true;
    if (this_present_span_id || that_present_span_id) {
      if (!(this_present_span_id && that_present_span_id))
        return false;
      if (this.span_id != that.span_id)
        return false;
    }

    boolean this_present_parent_span_id = true && this.isSetParentSpanId();
    boolean that_present_parent_span_id = true && that.isSetParentSpanId();
    if (this_present_parent_span_id || that_present_parent_span_id) {
      if (!(this_present_parent_span_id && that_present_parent_span_id))
        return false;
      if (this.parent_span_id != that.parent_span_id)
        return false;
    }

    boolean this_present_sampled = true && this.isSetSampled();
    boolean that_present_sampled = true && that.isSetSampled();
    if (this_present_sampled || that_present_sampled) {
      if (!(this_present_sampled && that_present_sampled))
        return false;
      if (this.sampled != that.sampled)
        return false;
    }

    boolean this_present_client_id = true && this.isSetClientId();
    boolean that_present_client_id = true && that.isSetClientId();
    if (this_present_client_id || that_present_client_id) {
      if (!(this_present_client_id && that_present_client_id))
        return false;
      if (!this.client_id.equals(that.client_id))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_trace_id = true;
    list.add(present_trace_id);
    if (present_trace_id)
      list.add(trace_id);

    boolean present_span_id = true;
    list.add(present_span_id);
    if (present_span_id)
      list.add(span_id);

    boolean present_parent_span_id = true && (isSetParentSpanId());
    list.add(present_parent_span_id);
    if (present_parent_span_id)
      list.add(parent_span_id);

    boolean present_sampled = true && (isSetSampled());
    list.add(present_sampled);
    if (present_sampled)
      list.add(sampled);

    boolean present_client_id = true && (isSetClientId());
    list.add(present_client_id);
    if (present_client_id)
      list.add(client_id);

    boolean present_flags = true && (isSetFlags());
    list.add(present_flags);
    if (present_flags)
      list.add(flags);

    return list.hashCode();
  }

  @Override
  public int compareTo(RequestHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace_id, other.trace_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(other.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span_id, other.span_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentSpanId()).compareTo(other.isSetParentSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_span_id, other.parent_span_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSampled()).compareTo(other.isSetSampled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSampled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampled, other.sampled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_id, other.client_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RequestHeader(");
    boolean first = true;

    sb.append("trace_id:");
    sb.append(this.trace_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("span_id:");
    sb.append(this.span_id);
    first = false;
    if (isSetParentSpanId()) {
      if (!first) sb.append(", ");
      sb.append("parent_span_id:");
      sb.append(this.parent_span_id);
      first = false;
    }
    if (isSetSampled()) {
      if (!first) sb.append(", ");
      sb.append("sampled:");
      sb.append(this.sampled);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("client_id:");
      if (this.client_id == null) {
        sb.append("null");
      } else {
        sb.append(this.client_id);
      }
      first = false;
    }
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      sb.append(this.flags);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (client_id != null) {
      client_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestHeaderStandardSchemeFactory implements SchemeFactory {
    public RequestHeaderStandardScheme getScheme() {
      return new RequestHeaderStandardScheme();
    }
  }

  private static class RequestHeaderStandardScheme extends StandardScheme<RequestHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.trace_id = iprot.readI64();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.span_id = iprot.readI64();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parent_span_id = iprot.readI64();
              struct.setParentSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SAMPLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sampled = iprot.readBool();
              struct.setSampledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.client_id = new ClientId();
              struct.client_id.read(iprot);
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.flags = iprot.readI64();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.trace_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
      oprot.writeI64(struct.span_id);
      oprot.writeFieldEnd();
      if (struct.isSetParentSpanId()) {
        oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
        oprot.writeI64(struct.parent_span_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSampled()) {
        oprot.writeFieldBegin(SAMPLED_FIELD_DESC);
        oprot.writeBool(struct.sampled);
        oprot.writeFieldEnd();
      }
      if (struct.client_id != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          struct.client_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFlags()) {
        oprot.writeFieldBegin(FLAGS_FIELD_DESC);
        oprot.writeI64(struct.flags);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestHeaderTupleSchemeFactory implements SchemeFactory {
    public RequestHeaderTupleScheme getScheme() {
      return new RequestHeaderTupleScheme();
    }
  }

  private static class RequestHeaderTupleScheme extends TupleScheme<RequestHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequestHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTraceId()) {
        optionals.set(0);
      }
      if (struct.isSetSpanId()) {
        optionals.set(1);
      }
      if (struct.isSetParentSpanId()) {
        optionals.set(2);
      }
      if (struct.isSetSampled()) {
        optionals.set(3);
      }
      if (struct.isSetClientId()) {
        optionals.set(4);
      }
      if (struct.isSetFlags()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTraceId()) {
        oprot.writeI64(struct.trace_id);
      }
      if (struct.isSetSpanId()) {
        oprot.writeI64(struct.span_id);
      }
      if (struct.isSetParentSpanId()) {
        oprot.writeI64(struct.parent_span_id);
      }
      if (struct.isSetSampled()) {
        oprot.writeBool(struct.sampled);
      }
      if (struct.isSetClientId()) {
        struct.client_id.write(oprot);
      }
      if (struct.isSetFlags()) {
        oprot.writeI64(struct.flags);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequestHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.trace_id = iprot.readI64();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.span_id = iprot.readI64();
        struct.setSpanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parent_span_id = iprot.readI64();
        struct.setParentSpanIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sampled = iprot.readBool();
        struct.setSampledIsSet(true);
      }
      if (incoming.get(4)) {
        struct.client_id = new ClientId();
        struct.client_id.read(iprot);
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.flags = iprot.readI64();
        struct.setFlagsIsSet(true);
      }
    }
  }

}

